/* Fix success/error overflow button border radius */
:host {
	/* border-radius: var(--ha-button-border-radius);
	overflow: hidden; */

	--mdc-icon-size: 20px;
}

/* Label */
.label {
	font-size: var(--md-sys-typescale-label-large-size);
	font-weight: var(--md-sys-typescale-label-large-weight);
	line-height: var(--md-sys-typescale-label-large-line-height);
	letter-spacing: var(--md-sys-typescale-label-large-tracking);
}

/* Icons */
.start::slotted(*) {
	margin-inline-end: 8px;
}
.end::slotted(*) {
	margin-inline-start: 8px;
}

/* Redefine colors to tokens, change border-radius on interaction */
.button {
	background-color: var(--ha-button-background-color);
	border-radius: var(--ha-button-border-radius);
	transition: border-radius var(--md-sys-motion-expressive-spatial-fast);
}
slot {
	color: var(--ha-button-text-color);
}

/* State layer */
.button::after {
	content: '';
	position: absolute;
	pointer-events: none;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	z-index: 1;
	opacity: 0;
	transition: opacity var(--md-sys-motion-expressive-effects-fast);
	background-color: var(--state-layer-color);
	border-radius: var(--ha-button-border-radius);
}
@media (hover: hover) {
	.button:hover {
		--ha-button-border-radius: var(--md-sys-shape-corner-small);
	}
	.button:hover::after {
		opacity: 0.08;
	}
}
.button.button:focus-visible,
.button:active {
	--ha-button-border-radius: var(--md-sys-shape-corner-small);
}
.button:focus-visible::after,
.button:active::after {
	opacity: 0.18;
}

/* Accent -> Tonal */
:host([appearance~='accent']) {
	--ha-button-background-color: var(--md-sys-color-secondary-container);
	--ha-button-text-color: var(--md-sys-color-on-secondary-container);
	--state-layer-color: var(--md-sys-color-on-secondary-container);
}

/* Filled */
:host([appearance~='filled']) {
	--ha-button-background-color: var(--md-sys-color-primary);
	--ha-button-text-color: var(--md-sys-color-on-primary);
	--state-layer-color: var(--md-sys-color-on-primary);
}

/* Outlined */
:host([appearance~='outlined']) {
	--ha-button-background-color: transparent;
	--ha-button-text-color: var(--md-sys-color-on-surface-variant);
	--state-layer-color: var(--md-sys-color-on-surface-variant);
}
:host([appearance~='outlined']) .button {
	border-color: var(--md-sys-color-outline-variant);
	border-width: 1px;
	border-style: solid;
}

/* Plain -> Text */
:host([appearance~='plain']) {
	--ha-button-background-color: transparent;
	--ha-button-text-color: var(--md-sys-color-primary);
	--state-layer-color: var(--md-sys-color-primary);
}

/* Disabled */
:host([disabled]) .button {
	background-color: rgba(from var(--md-sys-color-on-surface) r g b / 0.1);
}
:host([disabled]) slot {
	color: rgba(from var(--md-sys-color-on-surface) r g b / 0.38);
}
@media (hover: hover) {
	:host([disabled]) .button:hover::after {
		opacity: 0;
	}
}
:host([disabled]) .button:focus-visible::after,
:host([disabled]) .button:active::after {
	opacity: 0;
}

/* Fix status variant colors */
.success,
:host([variant~='success']) {
	--ha-button-background-color: var(--success-color);
	--ha-button-text-color: var(--wa-color-on-loud);
	--state-layer-color: var(--button-color-fill-loud-hover);
}
.warning,
:host([variant~='warning']) {
	--ha-button-background-color: var(--warning-color);
	--ha-button-text-color: var(--wa-color-on-loud);
	--state-layer-color: var(--button-color-fill-loud-hover);
}
.danger,
:host([variant~='danger']) {
	--ha-button-background-color: var(--error-color);
	--ha-button-text-color: var(--on-error-color);
	--state-layer-color: var(--on-error-color);
}
